import os
import re
from enum import Enum

original_dir = "originals"
fixed_dir = r"..\..\app\src\main\res\raw"


class InsertType(Enum):
    SINGLE = 0
    LIST = 1
    DICT = 2


insert_starts = {
    InsertType.SINGLE: "\n        val {} = SoundBundle(",
    InsertType.LIST: "\n        val {} = SoundBundle(listOf(\n",
    InsertType.DICT: "\n        val {} = SoundBundle(\n            LinkedHashMap(\n                mapOf(\n",
}

insert_mids = {
    InsertType.SINGLE: "{}{}",
    InsertType.LIST: "            {}{},\n",
    InsertType.DICT: "                    {}{} to {},\n",
}

insert_ends = {
    InsertType.SINGLE: ")",
    InsertType.LIST: "        ))",
    InsertType.DICT: "        )))",
}

insert_into_file = r"..\..\app\src\main\java\com\example\gloomhavendeck\SoundBundle.kt"
insert_at_start = r"        /* GENERATED BY nonsense/sounds/fix.py START */"
insert_at_end = r"        /* GENERATED BY nonsense/sounds/fix.py END */"

from pydub import AudioSegment


def match_target_amplitude(sound, target_dBFS):
    change_in_dBFS = target_dBFS - sound.dBFS
    return sound.apply_gain(change_in_dBFS)





# Removes things that can't appear in resource names.
def remove_undesirables(string: str) -> str:
    string = string.replace(" ", "_")
    string = string.replace("\\", "_")
    string = string.replace("+", "PLUS")
    string = string.replace("-", "MINUS")
    string = re.sub(r"\((0\.\d+)\)", "", string)
    return string


# Extracts the chance/weight from a file/dir name, expressed as (0.n)
def extract_chance(filename: str) -> tuple[str, str]:
    if match := re.search(r"\((0\.\d+)\)", filename):
        chance = match.group(1) + "f"
        filename = filename.replace(match.group(0), "")
    else:
        chance = "1f"
    return filename, chance


s = ""
for root, dirs, files in os.walk(original_dir, topdown=False):
    if len(dirs) + len(files) == 1:
        it = InsertType.SINGLE
    else:
        if len(set(extract_chance(x)[1] for x in dirs + files)) == 1:  # Are all the chances the same?
            it = InsertType.LIST
        else:
            it = InsertType.DICT
    root_sans_originals = "\\".join(root.split("\\")[1:])

    # Skip the root folder, everything there is unused
    if not root_sans_originals:
        continue

    current_folder = root.split("\\")[-1]
    s += insert_starts[it].format(remove_undesirables(root_sans_originals))
    for original_filename in files:
        # Handle resource
        new_file_name, chance = extract_chance(original_filename)
        new_file_name = remove_undesirables(os.path.join(root_sans_originals, new_file_name)).lower()
        new_file_name = os.path.splitext(new_file_name)[0] + ".ogg"
        print(original_filename)
        tempname = os.path.splitext("temp" + original_filename)[0] + ".ogg"
        os.system(
            f'ffmpeg -i "{os.path.join(root, original_filename)}" -y  -af silenceremove=1:0:-50dB -af "volume=5dB" -vn -ar '
            f'44100 -ac 2 -b:a 192k "{tempname}"')


        print("normalizing...")
        sound = AudioSegment.from_file(tempname, "ogg")
        normalized_sound = match_target_amplitude(sound, -20.0)
        normalized_sound.export(tempname, format="ogg")
        if os.path.exists(os.path.join(fixed_dir, new_file_name)):
            os.remove(os.path.join(fixed_dir, new_file_name))
        os.rename(tempname, os.path.join(fixed_dir, new_file_name))

        # Handle SoundBundles
        head, ext = os.path.splitext(new_file_name)
        s += insert_mids[it].format("R.raw.", head, chance)

    for directories in dirs:
        directories, chance = extract_chance(directories)
        s += insert_mids[it].format("", remove_undesirables(os.path.join(root_sans_originals, directories)), chance)

    s += insert_ends[it]

print(s)
# Insert
with open(insert_into_file, "r+") as f:
    data = f.read()
    print(
        re.search(re.escape(insert_at_start) + ".*?" + re.escape(insert_at_end), data, flags=re.MULTILINE | re.DOTALL))
    data = re.sub(
        re.escape(insert_at_start) + ".*?" + re.escape(insert_at_end),
        insert_at_start + s + insert_at_end,
        data,
        flags=re.MULTILINE | re.DOTALL
    )
    f.seek(0)
    f.write(data)
    f.truncate()
